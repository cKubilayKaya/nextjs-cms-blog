import Navbar from "../../../../components/admin/Navbar/Navbar";
import styles from "../../../../pages/admin/posts/posts.module.scss";
import http from "../../../../http-config";
import Head from "next/head";
import { useEffect, useState } from "react";
import Redirect from "../../../../components/Redirect";
import utilsStyles from "../../../../styles/utils.module.scss";
import { BiShowAlt } from "react-icons/bi";
import { AiOutlineDelete } from "react-icons/ai";
import { useRouter } from "next/router";
import Image from "next/image";

function Index({ post, comments }) {
  const Router = useRouter();

  const [isAuth, setIsAuth] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    setIsAuth(sessionStorage.getItem("user") ? true : false);
    setIsLoading(false);
  }, [isAuth]);

  const deleteComment = async (id) => {
    const res = await fetch(`${http}/api/admin/comments/${id}`, {
      method: "DELETE",
    });
    if (res.status === 200) {
      Router.reload(window.location.pathname);
    }
  };

  const activeComment = async (id) => {
    const res = await fetch(`${http}/api/admin/comments/${id}`, {
      method: "PUT",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ active: true }),
    });
    if (res.status === 200) {
      Router.reload(window.location.pathname);
    }
  };

  const inactiveComment = async (id) => {
    const res = await fetch(`${http}/api/admin/comments/${id}`, {
      method: "PUT",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ active: false }),
    });

    if (res.status === 200) {
      Router.reload(window.location.pathname);
    }
  };

  if (isLoading) {
    return null;
  } else {
    if (isAuth == true) {
      return (
        <div>
          <Head>
            <title>Admin Post Detail - {post.data.title}</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Navbar />
          {post && (
            <div className={styles.postsContainer}>
              <div className={styles.posts}>
                <div className={styles.post} key={post._id}>
                  {post.data.postImage &&
                    post.data.postImage.length != "" &&
                    post.data.postImage != "undefined" && (
                      <div className={styles.postImage}>
                        <Image
                          src={post.data.postImage}
                          alt={post.data.title}
                          layout="fixed"
                          width={320}
                          height={320}
                          objectFit="cover"
                          priority
                        />
                      </div>
                    )}
                  <div className={styles.adminPostDetailInfo}>
                    <h3>{post.data.title}</h3>
                    <p>{post.data.description}</p>
                  </div>
                </div>
              </div>
            </div>
          )}
          <div className={styles.comments}>
            <h3>Active Comments</h3>
            <div className={utilsStyles.hUnderline}></div>
            {comments.data
              .filter((comment) => comment.postId === post.data._id)
              .filter((comm) => comm.active === true)
              .map((c) => (
                <div key={c._id} className={styles.eachComment}>
                  <h3 className={styles.userComment}>{c.comment}</h3>
                  <div className={styles.user}>
                    <p>{c.fullName}</p>
                    <p>{c.email}</p>
                    <p>{c.time.split("T")[0]}</p>
                  </div>
                  <div className={styles.actions}>
                    <BiShowAlt
                      color="#80806e"
                      size="20"
                      onClick={() => inactiveComment(c._id)}
                    />
                    <AiOutlineDelete
                      color="#80806e"
                      size="20"
                      onClick={() => deleteComment(c._id)}
                    />
                  </div>
                </div>
              ))}
            <h3 className={styles.inactiveHeader}>Inactive Comments</h3>
            <div className={utilsStyles.hUnderline}></div>
            {comments.data
              .filter((comment) => comment.postId === post.data._id)
              .filter((comm) => comm.active === false)
              .map((c) => (
                <div key={c._id} className={styles.eachComment}>
                  <h3 className={styles.userComment}>{c.comment}</h3>
                  <div className={styles.user}>
                    <p>{c.fullName}</p>
                    <p>{c.email}</p>
                    <p>{c.time.split("T")[0]}</p>
                  </div>
                  <div className={styles.actions}>
                    <BiShowAlt
                      color="#80806e"
                      size="20"
                      onClick={() => activeComment(c._id)}
                    />
                    <AiOutlineDelete
                      color="#80806e"
                      size="20"
                      onClick={() => deleteComment(c._id)}
                    />
                  </div>
                </div>
              ))}
          </div>
        </div>
      );
    } else {
      return <Redirect to="/admin/auth/signin" />;
    }
  }
}

export async function getServerSideProps(context) {
  const res = await fetch(`${http}/api/admin/posts/${context.query.id}`);
  const post = await res.json();

  const resComments = await fetch(`${http}/api/admin/comments`);
  const comments = await resComments.json();

  return {
    props: { post, comments },
  };
}

export default Index;
